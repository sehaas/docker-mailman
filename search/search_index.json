{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GNU Mailman 3 Deployment with Docker \u00b6 This repository hosts code for two docker images maxking/mailman-core and maxking/mailman-web both of which are meant to deploy GNU Mailman 3 in a production environment. Docker is a container ecosystem which can run containers on several platforms. It consists of a tool called docker-compose which can be used to run multi-container applications. This repository consists of a docker-compose.yaml file which is a set of configurations that can be used to deploy the Mailman 3 Suite . Please see release page for the releases and change log. Release \u00b6 The tags for the images are assumed to be release versions for images. This is going to be a somewhat common philosophy of distributing Container images where the images with same tags are usually updated with the new functionality. Releases will follow the following rules: Images tagged like A.B.C will never change. If you want to pin down versions of Images, use these tags. Images tagged with A.B will correspond to the latest A.B.C version released. Releases in A.B series are supposed to be backwards compatible, i.e., any existing installation should not break when upgrading between subversions of A.B.C. So, if you want the latest updates and want to frequently update your installation without having to change the version numbers, you can use this. Any changes in the minor version of Mailman components of the images will cause a bump in the minor version, e.g., A.(B+1) can have one or more updated Mailman components from A.B. Also, significant change in functionality, that might change how Images work or how people interact with the containers can also cause a bump in the minor version. Major versions will change either when there are backwards incompatible changes or when the releases reach a certain set milestone or when there are bugfix releases for the internal components or both. Container Registries \u00b6 The container images are available from multiple container registries: Mailman Core \u00b6 ghcr.io/maxking/mailman-core quay.io/maxking/mailman-core docker.io/maxking/mailman-core Mailman Web \u00b6 ghcr.io/maxking/mailman-web quay.io/maxking/mailman-web docker.io/maxking/mailman-web Postorius \u00b6 ghcr.io/maxking/postorius quay.io/maxking/postorius docker.io/maxking/postorius Rolling Releases \u00b6 Rolling releases are made up of Mailman Components installed from git source . Note that these releases are made up of un-released software and should be assumed to be beta quality. Every commit is tested with Mailman's CI infrastructure and is included in rolling releases only if they have passed the complete test suite. $ docker pull docker.io/maxking/mailman-web:rolling $ docker pull docker.io/maxking/mailman-core:rolling Rolling releases are built with every commit and also re-generated weekly. You can inspect the images to get which commit it was built using: $ docker inspect --format '{{json .Config.Labels }}' mailman-core | python -m json.tool { \"version.core\": \"31f434d0\", \"version.git_commit\": \"45a4d7805b2b3d0e7c51679f59682d64ba02f05f\", \"version.mm3-hk\": \"c625bfd2\" } $ docker inspect --format '{{json .Config.Labels }}' mailman-web | python -m json.tool { \"version.client\": \"d9e9cb73\", \"version.dj-mm3\": \"72a7d6c4\", \"version.git_commit\": \"45a4d7805b2b3d0e7c51679f59682d64ba02f05f\", \"version.hyperkitty\": \"b67ca8a8\", \"version.postorius\": \"73328ad4\" } version.git_commit : This is the commit hash of the Dockerfile in the Github repo version.core : The commit hash of Mailman Core version.mm3-hk : The commit hash of Mailman3-hyperkitty plugin. version.client : The commit hash of Mailman Client. version.hyperkitty : The commit hash of Hyperkitty. version.postorius : The commit hash of Postorius. version.dj-mm3 : The commit hash of Django-Mailman3 project. Dependencies \u00b6 Docker Docker-compose To install these on Ubuntu/Debian: $ sudo apt install docker.io docker-compose For other systems, you can read the official Docker documentation to install the dependencies from here and here . Configuration \u00b6 Most of the common configuration is handled through environment variables in the docker-compose.yaml . However, there is need for some extra configuration that interacts directly with the application. There are two configuration files on the host that interact directly with Mailman's settings. These files exist on the host running the containers and are imported at runtime in the containers. /opt/mailman/core/mailman-extra.cfg : This is the configuration for Mailman Core and anything that you add here will be added to Core's configuration. You need to restart your mailman-core container for the changes in this file to take effect. /opt/mailman/web/settings_local.py : This is the Django configuration that is imported by the existing configuration provided by the mailman-web container. This file is referred to as settings.py in most of the Postorius and Django documentation. To change or override any settings in Django/Postorius, you need to create/edit this file. Also, note that if you need any other files to be accessible from the host to inside the container, you can place them at certain directories which are mounted inside the containers. /opt/mailman/core in host maps to /opt/mailman/ in mailman-core container. /opt/mailman/web in host maps to /opt/mailman-web-data in mailman-web container. Mailman-web \u00b6 These are the settings that you MUST change before deploying: SERVE_FROM_DOMAIN : The domain name from which Django will be served. To be added to ALLOWED_HOSTS in django settings. Default value is not set. This also replaces Django's default example.com SITE and becomes the default SITE (with SITE_ID=1). HYPERKITTY_API_KEY : Hyperkitty's API Key, should be set to the same value as set for the mailman-core. (Not needed in case of Postorius-only version.) MAILMAN_ADMIN_USER : The username for the admin user to be created by default. MAILMAN_ADMIN_EMAIL : The email for the admin user to be created by default. SECRET_KEY : Django's secret key, mainly used for signing cookies and others. Please note here that if you choose to create the admin user using the environment variables mentioned above ( MAILMAN_ADMIN_USER & MAILMAN_ADMIN_EMAIL ), no password is set for your admin account. To set a password, plese follow the \"Forgot Password\" link on the \"Sign In\" page. To configure the mailman-web container to send emails, add this to your settings_local.py .: EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' EMAIL_HOST = 'smtp.example.com' EMAIL_PORT = 25 Alternatively, you can use the environment variables SMTP_HOST (defaults to the container's gateway), SMTP_PORT (defaults to 25 ), SMTP_HOST_USER (defaults to an empty string), SMTP_HOST_PASSWORD (defaults to an empty string) and SMTP_USE_TLS (defaults to False ). This is required in addition to the Setup your MTA section below, which covers email setup for Mailman Core. For more details on how to configure this image, please look at Mailman-web's Readme Mailman-Core \u00b6 These are the variables that you MUST change before deploying: HYPERKITTY_API_KEY : Hyperkitty's API Key, should be set to the same value as set for the mailman-web. Skip the variable in case of non-Hyperkitty deployment. DATABASE_URL : URL of the type driver://user:password@hostname:port/databasename for the django to use. If not set, the default is set to sqlite:///opt/mailman-web-data/mailmanweb.db . The standard docker-compose.yaml comes with it set to a postgres database. There is no need to change this if you are happy with PostgreSQL. DATABASE_TYPE : Its value can be one of sqlite , postgres or mysql as these are the only three database types that Mailman 3 supports. Its default value is set to sqlite along with the default database class and default database url above. DATABASE_CLASS : Default value is mailman.database.sqlite.SQLiteDatabase . The values for this can be found in the mailman's documentation here . For more details on how to configure this image, please look Mailman-core's Readme While the above configuration will allow you to run the images and possibly view the Web Frontend, it won't be functional until it is fully configured to to send emails. To configure the mailman-core container to send emails, see the Setting your MTA section below . Running \u00b6 To run the containers, simply run: $ mkdir -p /opt/mailman/core $ mkdir -p /opt/mailman/web $ git clone https://github.com/maxking/docker-mailman $ cd docker-mailman # Change some configuration variables as mentioned above. $ docker-compose up -d Note that the web frontend in the mailman-web container is, by default, only configured to serve dynamic content. Anything static like stylesheets, etc., is expected to be served directly by the web server. The static content exists at /opt/mailman/web/static and should be aliased to /static/ in the web server configuration. See the nginx configuration as an example. This command will do several things, most importantly: Run a wsgi server using uwsgi for the Mailman's Django-based web frontend listening on port 8000. It will run 2 worker processes with 4 threads each. You may want to change the setting ALLOWED_HOSTS in the settings before deploying the application in production. Run a PostgreSQL server with a default database, username, and password as mentioned in the docker-compose.yaml . You will have to change configuration files too if you change any of these. Run mailman-core listening on port 8001 for REST API and port 8024 (LMTP server) for messages from your MTA. You will have to configure your MTA to send messages at this address. Some more details about what the above system achieves is mentioned below. If you are only going to deploy a simple configuration, you don't need to read this. However, these are very easy to understand if you know how docker works. First create a bridge network called mailman in the docker-compose.yaml . It will probably be named something else in your machine. All the containers mentioned (mailman-core, mailman-web, database) will join this network and are assigned static IPs. The host operating system is the default gateway from within these containers. Spin off a mailman-core container attached to the mailman bridge network created above. It has GNU Mailman 3 core running inside it. Mailman core's REST API is available at port 8001 and LMTP server listens at port 8024. Spin off a mailman-web container which has a Django application running with both Mailman's web frontend Postorius and Mailman's web-based Archiver running. Uwsgi server is used to run a web server with the configuration provided in this repository here . You may want to change the setting ALLOWED_HOSTS in the settings before deploying the application in production. You can do that by adding a /opt/mailman/web/settings_local.py which is imported by the Django when running. Spin off a PostgreSQL database container which is used by both mailman-core and mailman-web as their primary database. mailman-core mounts /opt/mailman/core from host OS at /opt/mailman in the container. Mailman's var directory is stored there so that it is accessible from the host operating system. Configuration for Mailman core is generated on every run from the environment variables provided. Extra configuration can also be provided at /opt/mailman/core/mailman-extra.cfg (on host), and will be added to generated configuration file. Mailman also needs another configuration file called mailman-hyperkitty.cfg and is also expected to be at /opt/mailman/core/ on the host OS. mailman-web mounts /opt/mailman/web from the host OS to /opt/mailman-web-data in the container. It consists of the logs and settings_local.py file for Django. database mounts /opt/mailman/database at /var/lib/postgresql/data so that PostgreSQL can persist its data even if the database containers are updated/changed/removed. Setting up your MTA \u00b6 The provided docker containers do not have an MTA in-built. You can either run your own MTA inside a container and have them relay emails to the mailman-core container or just install an MTA on the host and have them relay emails. To use Exim4 , it should be setup to relay emails from mailman-core and mailman-web. The mailman specific configuration is provided in the repository at core/assets/exim . There are three files 25_mm_macros to be placed at /etc/exim4/conf.d/main/25_mm3_macros in a typical Debian install of exim4. Please change MY_DOMAIN_NAME to the domain name that will be used to serve mailman. Multi-domain setups will be added later. 455_mm3_router to be placed at /etc/exim4/conf.d/router/455_mm3_router in a typical Debian install of exim4. 55_mm3_transport to be placed at /etc/exim4/conf.d/transport/55_mm3_transport in a typical Debian install of exim4. Also, the default configuration inside the mailman-core image has the MTA set to Exim, but just for reference, it looks like this: # mailman.cfg [mta] incoming: mailman.mta.exim4.LMTP outgoing: mailman.mta.deliver.deliver lmtp_host: $MM_HOSTNAME lmtp_port: 8024 smtp_host: $SMTP_HOST smtp_port: $SMTP_PORT configuration: python:mailman.config.exim4 To use Postfix , edit the main.cf configuration file, which is typically at /etc/postfix/main.cf on Debian-based operating systems. Add mailman-core and mailman-web to mynetworks so it will relay emails from the containers and add the following configuration lines: # main.cf # Support the default VERP delimiter. recipient_delimiter = + unknown_local_recipient_reject_code = 550 owner_request_special = no transport_maps = regexp:/opt/mailman/core/var/data/postfix_lmtp local_recipient_maps = regexp:/opt/mailman/core/var/data/postfix_lmtp relay_domains = regexp:/opt/mailman/core/var/data/postfix_domains To configure Mailman to use Postfix, add the following to mailman-extra.cfg at /opt/mailman/core/mailman-extra.cfg . # mailman-extra.cfg [mta] incoming: mailman.mta.postfix.LMTP outgoing: mailman.mta.deliver.deliver # mailman-core hostname or IP from the Postfix server lmtp_host: localhost lmtp_port: 8024 # Postfix server's hostname or IP from mailman-core smtp_host: smtp.example.com smtp_port: 25 configuration: /etc/postfix-mailman.cfg The configuration file /etc/postfix-mailman.cfg is generated automatically. Setup site owner address. By default, mailman is setup with the site_owner set to 'changeme@example.com'. This should be pointing to a valid mailbox. Add the following to the '/opt/mailman/core/mailman-extra.cfg'. [mailman] # This address is the \"site owner\" address. Certain messages which must be # delivered to a human, but which can't be delivered to a list owner (e.g. a # bounce from a list owner), will be sent to this address. It should point to # a human. site_owner: changeme@example.com Setting up search indexing \u00b6 Hyperkitty in mailman-web image support full-text indexing. The current default indexing engine is Whoosh for historical reasons. It is highly recommended that you instead use Xapian for production use cases. The default will change when the next major version bump happens. To configure your Mailman-web container to use Xapian, add the following to your settings_local.py : HAYSTACK_CONNECTIONS = { 'default': { 'ENGINE': 'xapian_backend.XapianEngine', 'PATH': \"/opt/mailman-web-data/fulltext_index\", }, } If you have been using the default search indexing engine, you might have to re-index emails using the following command: $ docker-compose exec mailman-web ./manage.py rebuild_index This command can take some time if you a lot of emails, so please be patient! Setting up your web server \u00b6 It is advisable to run your Django (interfaced through WSGI server) through an actual webserver in production for better performance. If you are using v0.1.0, the uwsgi server is configured to listen to requests at port 8000 using the HTTP protocol. Make sure that you preserve the HOST header when you proxy the requests from your Web Server. In Nginx you can do that by adding the following to your configuration: # Nginx configuration. location /static { alias /opt/mailman/web/static; autoindex off; } location / { proxy_pass http://localhost:8000; include uwsgi_params; uwsgi_read_timeout 300; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $remote_addr; } Make sure you are using proxy_pass for the HTTP protocol. uwsgi \u00b6 Starting from v0.1.1, the uwsgi server is configured to listen to requests at port 8000 with the http protocol and port 8080 for the uwsgi protocol. Please make sure that you are using port 8080 for uwsgi protocol. It is advised to use the uwsgi protocol as it has better performance. Both Apache and Nginx have native support for the uwsgi protocol through plugins which are generally included in the distro packages. To move to uwsgi protocol in the above nginx configuration use this # Nginx configuration. location /static { alias /opt/mailman/web/static; autoindex off; } location / { uwsgi_pass localhost:8080; include uwsgi_params; uwsgi_read_timeout 300; } Please make sure that you are using v0.1.1 or greater if you use this configuration. Serving static files \u00b6 UWSGI by default doesn't serve static files so, when running mailman-web using the provided docker-compose.yaml file, you won't see any CSS or JS files being served. To enable serving of static files using UWSGI, add the following environment variable to your docker-compose.yaml file under mailman-web : UWSGI_STATIC_MAP=/static=/opt/mailman-web-data/static It is recommended to use web-server to serve static files instead of UWSGI for better performance. You will have to add an alias rule in your web server to serve the static files. See here for instructions on how to configure your web server. The STATIC_ROOT for you would be /opt/mailman/web/static . SSL certificates \u00b6 SSL Certificates from Lets Encrypt need to be renewed every 90 days. You can setup a cron job to do the job. I have this small shell script (certbot-renew.sh) that you can put up in /etc/cron.monthly to get the job done. #! /bin/bash cd /opt/letsencrypt/ ./certbot-auto --config /etc/letsencrypt/renewal/MY_DOMAIN_NAME.conf certonly if [ $? -ne 0 ] then ERRORLOG=`tail /var/log/letsencrypt/letsencrypt.log` echo -e \"The Let's Encrypt cert has not been renewed! \\n \\n\" \\ $ERRORLOG else nginx -s reload fi exit 0 Please do not forget to make the script executable ( chmod +x certbot-renew.sh ). LICENSE \u00b6 This repository is licensed under the MIT License. Please see the LICENSE file for more details.","title":"Home"},{"location":"#gnu-mailman-3-deployment-with-docker","text":"This repository hosts code for two docker images maxking/mailman-core and maxking/mailman-web both of which are meant to deploy GNU Mailman 3 in a production environment. Docker is a container ecosystem which can run containers on several platforms. It consists of a tool called docker-compose which can be used to run multi-container applications. This repository consists of a docker-compose.yaml file which is a set of configurations that can be used to deploy the Mailman 3 Suite . Please see release page for the releases and change log.","title":"GNU Mailman 3 Deployment with Docker"},{"location":"#release","text":"The tags for the images are assumed to be release versions for images. This is going to be a somewhat common philosophy of distributing Container images where the images with same tags are usually updated with the new functionality. Releases will follow the following rules: Images tagged like A.B.C will never change. If you want to pin down versions of Images, use these tags. Images tagged with A.B will correspond to the latest A.B.C version released. Releases in A.B series are supposed to be backwards compatible, i.e., any existing installation should not break when upgrading between subversions of A.B.C. So, if you want the latest updates and want to frequently update your installation without having to change the version numbers, you can use this. Any changes in the minor version of Mailman components of the images will cause a bump in the minor version, e.g., A.(B+1) can have one or more updated Mailman components from A.B. Also, significant change in functionality, that might change how Images work or how people interact with the containers can also cause a bump in the minor version. Major versions will change either when there are backwards incompatible changes or when the releases reach a certain set milestone or when there are bugfix releases for the internal components or both.","title":"Release"},{"location":"#container-registries","text":"The container images are available from multiple container registries:","title":"Container Registries"},{"location":"#mailman-core","text":"ghcr.io/maxking/mailman-core quay.io/maxking/mailman-core docker.io/maxking/mailman-core","title":"Mailman Core"},{"location":"#mailman-web","text":"ghcr.io/maxking/mailman-web quay.io/maxking/mailman-web docker.io/maxking/mailman-web","title":"Mailman Web"},{"location":"#postorius","text":"ghcr.io/maxking/postorius quay.io/maxking/postorius docker.io/maxking/postorius","title":"Postorius"},{"location":"#rolling-releases","text":"Rolling releases are made up of Mailman Components installed from git source . Note that these releases are made up of un-released software and should be assumed to be beta quality. Every commit is tested with Mailman's CI infrastructure and is included in rolling releases only if they have passed the complete test suite. $ docker pull docker.io/maxking/mailman-web:rolling $ docker pull docker.io/maxking/mailman-core:rolling Rolling releases are built with every commit and also re-generated weekly. You can inspect the images to get which commit it was built using: $ docker inspect --format '{{json .Config.Labels }}' mailman-core | python -m json.tool { \"version.core\": \"31f434d0\", \"version.git_commit\": \"45a4d7805b2b3d0e7c51679f59682d64ba02f05f\", \"version.mm3-hk\": \"c625bfd2\" } $ docker inspect --format '{{json .Config.Labels }}' mailman-web | python -m json.tool { \"version.client\": \"d9e9cb73\", \"version.dj-mm3\": \"72a7d6c4\", \"version.git_commit\": \"45a4d7805b2b3d0e7c51679f59682d64ba02f05f\", \"version.hyperkitty\": \"b67ca8a8\", \"version.postorius\": \"73328ad4\" } version.git_commit : This is the commit hash of the Dockerfile in the Github repo version.core : The commit hash of Mailman Core version.mm3-hk : The commit hash of Mailman3-hyperkitty plugin. version.client : The commit hash of Mailman Client. version.hyperkitty : The commit hash of Hyperkitty. version.postorius : The commit hash of Postorius. version.dj-mm3 : The commit hash of Django-Mailman3 project.","title":"Rolling Releases"},{"location":"#dependencies","text":"Docker Docker-compose To install these on Ubuntu/Debian: $ sudo apt install docker.io docker-compose For other systems, you can read the official Docker documentation to install the dependencies from here and here .","title":"Dependencies"},{"location":"#configuration","text":"Most of the common configuration is handled through environment variables in the docker-compose.yaml . However, there is need for some extra configuration that interacts directly with the application. There are two configuration files on the host that interact directly with Mailman's settings. These files exist on the host running the containers and are imported at runtime in the containers. /opt/mailman/core/mailman-extra.cfg : This is the configuration for Mailman Core and anything that you add here will be added to Core's configuration. You need to restart your mailman-core container for the changes in this file to take effect. /opt/mailman/web/settings_local.py : This is the Django configuration that is imported by the existing configuration provided by the mailman-web container. This file is referred to as settings.py in most of the Postorius and Django documentation. To change or override any settings in Django/Postorius, you need to create/edit this file. Also, note that if you need any other files to be accessible from the host to inside the container, you can place them at certain directories which are mounted inside the containers. /opt/mailman/core in host maps to /opt/mailman/ in mailman-core container. /opt/mailman/web in host maps to /opt/mailman-web-data in mailman-web container.","title":"Configuration"},{"location":"#mailman-web_1","text":"These are the settings that you MUST change before deploying: SERVE_FROM_DOMAIN : The domain name from which Django will be served. To be added to ALLOWED_HOSTS in django settings. Default value is not set. This also replaces Django's default example.com SITE and becomes the default SITE (with SITE_ID=1). HYPERKITTY_API_KEY : Hyperkitty's API Key, should be set to the same value as set for the mailman-core. (Not needed in case of Postorius-only version.) MAILMAN_ADMIN_USER : The username for the admin user to be created by default. MAILMAN_ADMIN_EMAIL : The email for the admin user to be created by default. SECRET_KEY : Django's secret key, mainly used for signing cookies and others. Please note here that if you choose to create the admin user using the environment variables mentioned above ( MAILMAN_ADMIN_USER & MAILMAN_ADMIN_EMAIL ), no password is set for your admin account. To set a password, plese follow the \"Forgot Password\" link on the \"Sign In\" page. To configure the mailman-web container to send emails, add this to your settings_local.py .: EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' EMAIL_HOST = 'smtp.example.com' EMAIL_PORT = 25 Alternatively, you can use the environment variables SMTP_HOST (defaults to the container's gateway), SMTP_PORT (defaults to 25 ), SMTP_HOST_USER (defaults to an empty string), SMTP_HOST_PASSWORD (defaults to an empty string) and SMTP_USE_TLS (defaults to False ). This is required in addition to the Setup your MTA section below, which covers email setup for Mailman Core. For more details on how to configure this image, please look at Mailman-web's Readme","title":"Mailman-web"},{"location":"#mailman-core_1","text":"These are the variables that you MUST change before deploying: HYPERKITTY_API_KEY : Hyperkitty's API Key, should be set to the same value as set for the mailman-web. Skip the variable in case of non-Hyperkitty deployment. DATABASE_URL : URL of the type driver://user:password@hostname:port/databasename for the django to use. If not set, the default is set to sqlite:///opt/mailman-web-data/mailmanweb.db . The standard docker-compose.yaml comes with it set to a postgres database. There is no need to change this if you are happy with PostgreSQL. DATABASE_TYPE : Its value can be one of sqlite , postgres or mysql as these are the only three database types that Mailman 3 supports. Its default value is set to sqlite along with the default database class and default database url above. DATABASE_CLASS : Default value is mailman.database.sqlite.SQLiteDatabase . The values for this can be found in the mailman's documentation here . For more details on how to configure this image, please look Mailman-core's Readme While the above configuration will allow you to run the images and possibly view the Web Frontend, it won't be functional until it is fully configured to to send emails. To configure the mailman-core container to send emails, see the Setting your MTA section below .","title":"Mailman-Core"},{"location":"#running","text":"To run the containers, simply run: $ mkdir -p /opt/mailman/core $ mkdir -p /opt/mailman/web $ git clone https://github.com/maxking/docker-mailman $ cd docker-mailman # Change some configuration variables as mentioned above. $ docker-compose up -d Note that the web frontend in the mailman-web container is, by default, only configured to serve dynamic content. Anything static like stylesheets, etc., is expected to be served directly by the web server. The static content exists at /opt/mailman/web/static and should be aliased to /static/ in the web server configuration. See the nginx configuration as an example. This command will do several things, most importantly: Run a wsgi server using uwsgi for the Mailman's Django-based web frontend listening on port 8000. It will run 2 worker processes with 4 threads each. You may want to change the setting ALLOWED_HOSTS in the settings before deploying the application in production. Run a PostgreSQL server with a default database, username, and password as mentioned in the docker-compose.yaml . You will have to change configuration files too if you change any of these. Run mailman-core listening on port 8001 for REST API and port 8024 (LMTP server) for messages from your MTA. You will have to configure your MTA to send messages at this address. Some more details about what the above system achieves is mentioned below. If you are only going to deploy a simple configuration, you don't need to read this. However, these are very easy to understand if you know how docker works. First create a bridge network called mailman in the docker-compose.yaml . It will probably be named something else in your machine. All the containers mentioned (mailman-core, mailman-web, database) will join this network and are assigned static IPs. The host operating system is the default gateway from within these containers. Spin off a mailman-core container attached to the mailman bridge network created above. It has GNU Mailman 3 core running inside it. Mailman core's REST API is available at port 8001 and LMTP server listens at port 8024. Spin off a mailman-web container which has a Django application running with both Mailman's web frontend Postorius and Mailman's web-based Archiver running. Uwsgi server is used to run a web server with the configuration provided in this repository here . You may want to change the setting ALLOWED_HOSTS in the settings before deploying the application in production. You can do that by adding a /opt/mailman/web/settings_local.py which is imported by the Django when running. Spin off a PostgreSQL database container which is used by both mailman-core and mailman-web as their primary database. mailman-core mounts /opt/mailman/core from host OS at /opt/mailman in the container. Mailman's var directory is stored there so that it is accessible from the host operating system. Configuration for Mailman core is generated on every run from the environment variables provided. Extra configuration can also be provided at /opt/mailman/core/mailman-extra.cfg (on host), and will be added to generated configuration file. Mailman also needs another configuration file called mailman-hyperkitty.cfg and is also expected to be at /opt/mailman/core/ on the host OS. mailman-web mounts /opt/mailman/web from the host OS to /opt/mailman-web-data in the container. It consists of the logs and settings_local.py file for Django. database mounts /opt/mailman/database at /var/lib/postgresql/data so that PostgreSQL can persist its data even if the database containers are updated/changed/removed.","title":"Running"},{"location":"#setting-up-your-mta","text":"The provided docker containers do not have an MTA in-built. You can either run your own MTA inside a container and have them relay emails to the mailman-core container or just install an MTA on the host and have them relay emails. To use Exim4 , it should be setup to relay emails from mailman-core and mailman-web. The mailman specific configuration is provided in the repository at core/assets/exim . There are three files 25_mm_macros to be placed at /etc/exim4/conf.d/main/25_mm3_macros in a typical Debian install of exim4. Please change MY_DOMAIN_NAME to the domain name that will be used to serve mailman. Multi-domain setups will be added later. 455_mm3_router to be placed at /etc/exim4/conf.d/router/455_mm3_router in a typical Debian install of exim4. 55_mm3_transport to be placed at /etc/exim4/conf.d/transport/55_mm3_transport in a typical Debian install of exim4. Also, the default configuration inside the mailman-core image has the MTA set to Exim, but just for reference, it looks like this: # mailman.cfg [mta] incoming: mailman.mta.exim4.LMTP outgoing: mailman.mta.deliver.deliver lmtp_host: $MM_HOSTNAME lmtp_port: 8024 smtp_host: $SMTP_HOST smtp_port: $SMTP_PORT configuration: python:mailman.config.exim4 To use Postfix , edit the main.cf configuration file, which is typically at /etc/postfix/main.cf on Debian-based operating systems. Add mailman-core and mailman-web to mynetworks so it will relay emails from the containers and add the following configuration lines: # main.cf # Support the default VERP delimiter. recipient_delimiter = + unknown_local_recipient_reject_code = 550 owner_request_special = no transport_maps = regexp:/opt/mailman/core/var/data/postfix_lmtp local_recipient_maps = regexp:/opt/mailman/core/var/data/postfix_lmtp relay_domains = regexp:/opt/mailman/core/var/data/postfix_domains To configure Mailman to use Postfix, add the following to mailman-extra.cfg at /opt/mailman/core/mailman-extra.cfg . # mailman-extra.cfg [mta] incoming: mailman.mta.postfix.LMTP outgoing: mailman.mta.deliver.deliver # mailman-core hostname or IP from the Postfix server lmtp_host: localhost lmtp_port: 8024 # Postfix server's hostname or IP from mailman-core smtp_host: smtp.example.com smtp_port: 25 configuration: /etc/postfix-mailman.cfg The configuration file /etc/postfix-mailman.cfg is generated automatically. Setup site owner address. By default, mailman is setup with the site_owner set to 'changeme@example.com'. This should be pointing to a valid mailbox. Add the following to the '/opt/mailman/core/mailman-extra.cfg'. [mailman] # This address is the \"site owner\" address. Certain messages which must be # delivered to a human, but which can't be delivered to a list owner (e.g. a # bounce from a list owner), will be sent to this address. It should point to # a human. site_owner: changeme@example.com","title":"Setting up your MTA"},{"location":"#setting-up-search-indexing","text":"Hyperkitty in mailman-web image support full-text indexing. The current default indexing engine is Whoosh for historical reasons. It is highly recommended that you instead use Xapian for production use cases. The default will change when the next major version bump happens. To configure your Mailman-web container to use Xapian, add the following to your settings_local.py : HAYSTACK_CONNECTIONS = { 'default': { 'ENGINE': 'xapian_backend.XapianEngine', 'PATH': \"/opt/mailman-web-data/fulltext_index\", }, } If you have been using the default search indexing engine, you might have to re-index emails using the following command: $ docker-compose exec mailman-web ./manage.py rebuild_index This command can take some time if you a lot of emails, so please be patient!","title":"Setting up search indexing"},{"location":"#setting-up-your-web-server","text":"It is advisable to run your Django (interfaced through WSGI server) through an actual webserver in production for better performance. If you are using v0.1.0, the uwsgi server is configured to listen to requests at port 8000 using the HTTP protocol. Make sure that you preserve the HOST header when you proxy the requests from your Web Server. In Nginx you can do that by adding the following to your configuration: # Nginx configuration. location /static { alias /opt/mailman/web/static; autoindex off; } location / { proxy_pass http://localhost:8000; include uwsgi_params; uwsgi_read_timeout 300; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $remote_addr; } Make sure you are using proxy_pass for the HTTP protocol.","title":"Setting up your web server"},{"location":"#uwsgi","text":"Starting from v0.1.1, the uwsgi server is configured to listen to requests at port 8000 with the http protocol and port 8080 for the uwsgi protocol. Please make sure that you are using port 8080 for uwsgi protocol. It is advised to use the uwsgi protocol as it has better performance. Both Apache and Nginx have native support for the uwsgi protocol through plugins which are generally included in the distro packages. To move to uwsgi protocol in the above nginx configuration use this # Nginx configuration. location /static { alias /opt/mailman/web/static; autoindex off; } location / { uwsgi_pass localhost:8080; include uwsgi_params; uwsgi_read_timeout 300; } Please make sure that you are using v0.1.1 or greater if you use this configuration.","title":"uwsgi"},{"location":"#serving-static-files","text":"UWSGI by default doesn't serve static files so, when running mailman-web using the provided docker-compose.yaml file, you won't see any CSS or JS files being served. To enable serving of static files using UWSGI, add the following environment variable to your docker-compose.yaml file under mailman-web : UWSGI_STATIC_MAP=/static=/opt/mailman-web-data/static It is recommended to use web-server to serve static files instead of UWSGI for better performance. You will have to add an alias rule in your web server to serve the static files. See here for instructions on how to configure your web server. The STATIC_ROOT for you would be /opt/mailman/web/static .","title":"Serving static files"},{"location":"#ssl-certificates","text":"SSL Certificates from Lets Encrypt need to be renewed every 90 days. You can setup a cron job to do the job. I have this small shell script (certbot-renew.sh) that you can put up in /etc/cron.monthly to get the job done. #! /bin/bash cd /opt/letsencrypt/ ./certbot-auto --config /etc/letsencrypt/renewal/MY_DOMAIN_NAME.conf certonly if [ $? -ne 0 ] then ERRORLOG=`tail /var/log/letsencrypt/letsencrypt.log` echo -e \"The Let's Encrypt cert has not been renewed! \\n \\n\" \\ $ERRORLOG else nginx -s reload fi exit 0 Please do not forget to make the script executable ( chmod +x certbot-renew.sh ).","title":"SSL certificates"},{"location":"#license","text":"This repository is licensed under the MIT License. Please see the LICENSE file for more details.","title":"LICENSE"},{"location":"core/","text":"Mailman3 Core Docker Image \u00b6 When you spawn off this container, you must mount /opt/mailman to the container. Mailman's var directory will also be stored here so that it can persist across different sessions and containers. Any configuration at /opt/mailman/core/mailman-extra.cfg (on the host) will be added to the mailman's default generated confifguration (See below). It is not advised to run multiple mailman processes on the same host sharing the same /opt/mailman ( /opt/mailman/core on the host) directory as this will almost certainly be dangerous. Configuration \u00b6 These are the variables that you MUST change before deploying: HYPERKITTY_API_KEY : Hyperkitty's API Key, should be set to the same value as set for the mailman-core. DATABASE_URL : URL of the type driver://user:password@hostname:port/databasename for the django to use. If not set, the default is set to sqlite:///opt/mailman-web-data/mailmanweb.db . The standard docker-compose.yaml comes with it set to a postgres database. It is not must to change this if you are happy with postgresql. DATABASE_TYPE : It's value can be one of sqlite , postgres or mysql as these are the only three database types that Mailman 3 supports. It's defualt value is set to sqlite along with the default database class and default database url above. DATABASE_CLASS : Default value is mailman.database.sqlite.SQLiteDatabase . The values for this can be found in the mailman's documentation [here][11]. These are the variables that you don't need to change if you are using a standard version of docker-compose.yaml from this repository. MM_HOSTNAME : Which hostname or IP should Core bind to for REST API and LMTP. If not defined output from hostname command is used. MAILMAN_REST_PORT : Which port should Core use for the REST API. If not defined the default is 8001 . MAILMAN_REST_USER : Which username should Core use for the REST API. If not defined the default is restadmin . MAILMAN_REST_PASSWORD : Which password should Core use for the REST API. If not defined the default is restpass . MTA : Mail Transfer Agent to use. Either exim or postfix . Default value is exim . SMTP_HOST : IP Address/hostname from which you will be sending emails. Default value is the container's gateway retrieved from: /sbin/ip route | awk '/default/ { print $3 }' SMTP_PORT : Port used for SMTP. Default is 25 . HYPERKITTY_URL : Default value is http://mailman-web:8000/hyperkitty In case of a need for fine tuning of REST API web-server that uses Gunicorn (e.g. for raising of timeouts) /opt/mailman/core/gunicorn-extra.cfg file could be provided holding necessary configuration options. Configuration file, shipped with Mailman Core , is used by default. For example, to increase the default 30 sec timeout, which won't work for some API calls to highly populated lists, provide the following gunicorn-extra.cfg file: [gunicorn] graceful_timeout = 30 timeout = 300 Running Mailman-Core \u00b6 It is highly recomended that you run this image along with the docker-compose.yaml file provided at the github repo of this image. However, it is possibel to run this image as a standalone container if you want just a mailman-core. $ mkdir -p /opt/mailman/core $ docker run -it -e \"HYPERKITTY_API_KEY=changeme\" -h mailman-core -v /opt/mailman/core:/opt/mailman mailman-core However, if you don't provide the environment DATABASE_URL , the database may not be persistant. All the configuration options are explained in more detail. If you need mode advanced configuration for mailman, you can create /opt/mailman/mailman.cfg and it be added to the configuration inside the container. Note that, anything inside this configuration will override the settings provided via the environment variables and their default values. By default, the following settings are generated: # mailman.cfg [mta] incoming: mailman.mta.exim4.LMTP outgoing: mailman.mta.deliver.deliver lmtp_host: $MM_HOSTNAME lmtp_port: 8024 smtp_host: $SMTP_HOST smtp_port: $SMTP_PORT configuration: python:mailman.config.exim4 [runner.retry] sleep_time: 10s [webservice] hostname: $MM_HOSTNAME port: $MAILMAN_REST_PORT admin_user: $MAILMAN_REST_USER admin_pass: $MAILMAN_REST_PASSWORD configuration: /etc/gunicorn.cfg [archiver.hyperkitty] class: mailman_hyperkitty.Archiver enable: yes configuration: /etc/mailman-hyperkitty.cfg [database] class: $DATABASE_CLASS url: $DATABASE_URL # mailman-hyperkitty.cfg [general] base_url: $HYPERKITTY_URL api_key: $HYPERKITTY_API_KEY MTA \u00b6 You can use Postfix or Exim with this image to send emails. Mailman Core can interact with any modern MTA which can deliver emails over LMTP. The documentation for Mailman Core has configuration settigs for using them. Only Exim and Postfix has been tested with these images and are supported as of now. There might be some limitations with using other MTAs in a containerized environments. Contributions are welcome for anything additional needed to support other MTAs. To setup Exim or Posfix, checkout the documentation .","title":"Mailman Core"},{"location":"core/#mailman3-core-docker-image","text":"When you spawn off this container, you must mount /opt/mailman to the container. Mailman's var directory will also be stored here so that it can persist across different sessions and containers. Any configuration at /opt/mailman/core/mailman-extra.cfg (on the host) will be added to the mailman's default generated confifguration (See below). It is not advised to run multiple mailman processes on the same host sharing the same /opt/mailman ( /opt/mailman/core on the host) directory as this will almost certainly be dangerous.","title":"Mailman3 Core Docker Image"},{"location":"core/#configuration","text":"These are the variables that you MUST change before deploying: HYPERKITTY_API_KEY : Hyperkitty's API Key, should be set to the same value as set for the mailman-core. DATABASE_URL : URL of the type driver://user:password@hostname:port/databasename for the django to use. If not set, the default is set to sqlite:///opt/mailman-web-data/mailmanweb.db . The standard docker-compose.yaml comes with it set to a postgres database. It is not must to change this if you are happy with postgresql. DATABASE_TYPE : It's value can be one of sqlite , postgres or mysql as these are the only three database types that Mailman 3 supports. It's defualt value is set to sqlite along with the default database class and default database url above. DATABASE_CLASS : Default value is mailman.database.sqlite.SQLiteDatabase . The values for this can be found in the mailman's documentation [here][11]. These are the variables that you don't need to change if you are using a standard version of docker-compose.yaml from this repository. MM_HOSTNAME : Which hostname or IP should Core bind to for REST API and LMTP. If not defined output from hostname command is used. MAILMAN_REST_PORT : Which port should Core use for the REST API. If not defined the default is 8001 . MAILMAN_REST_USER : Which username should Core use for the REST API. If not defined the default is restadmin . MAILMAN_REST_PASSWORD : Which password should Core use for the REST API. If not defined the default is restpass . MTA : Mail Transfer Agent to use. Either exim or postfix . Default value is exim . SMTP_HOST : IP Address/hostname from which you will be sending emails. Default value is the container's gateway retrieved from: /sbin/ip route | awk '/default/ { print $3 }' SMTP_PORT : Port used for SMTP. Default is 25 . HYPERKITTY_URL : Default value is http://mailman-web:8000/hyperkitty In case of a need for fine tuning of REST API web-server that uses Gunicorn (e.g. for raising of timeouts) /opt/mailman/core/gunicorn-extra.cfg file could be provided holding necessary configuration options. Configuration file, shipped with Mailman Core , is used by default. For example, to increase the default 30 sec timeout, which won't work for some API calls to highly populated lists, provide the following gunicorn-extra.cfg file: [gunicorn] graceful_timeout = 30 timeout = 300","title":"Configuration"},{"location":"core/#running-mailman-core","text":"It is highly recomended that you run this image along with the docker-compose.yaml file provided at the github repo of this image. However, it is possibel to run this image as a standalone container if you want just a mailman-core. $ mkdir -p /opt/mailman/core $ docker run -it -e \"HYPERKITTY_API_KEY=changeme\" -h mailman-core -v /opt/mailman/core:/opt/mailman mailman-core However, if you don't provide the environment DATABASE_URL , the database may not be persistant. All the configuration options are explained in more detail. If you need mode advanced configuration for mailman, you can create /opt/mailman/mailman.cfg and it be added to the configuration inside the container. Note that, anything inside this configuration will override the settings provided via the environment variables and their default values. By default, the following settings are generated: # mailman.cfg [mta] incoming: mailman.mta.exim4.LMTP outgoing: mailman.mta.deliver.deliver lmtp_host: $MM_HOSTNAME lmtp_port: 8024 smtp_host: $SMTP_HOST smtp_port: $SMTP_PORT configuration: python:mailman.config.exim4 [runner.retry] sleep_time: 10s [webservice] hostname: $MM_HOSTNAME port: $MAILMAN_REST_PORT admin_user: $MAILMAN_REST_USER admin_pass: $MAILMAN_REST_PASSWORD configuration: /etc/gunicorn.cfg [archiver.hyperkitty] class: mailman_hyperkitty.Archiver enable: yes configuration: /etc/mailman-hyperkitty.cfg [database] class: $DATABASE_CLASS url: $DATABASE_URL # mailman-hyperkitty.cfg [general] base_url: $HYPERKITTY_URL api_key: $HYPERKITTY_API_KEY","title":"Running Mailman-Core"},{"location":"core/#mta","text":"You can use Postfix or Exim with this image to send emails. Mailman Core can interact with any modern MTA which can deliver emails over LMTP. The documentation for Mailman Core has configuration settigs for using them. Only Exim and Postfix has been tested with these images and are supported as of now. There might be some limitations with using other MTAs in a containerized environments. Contributions are welcome for anything additional needed to support other MTAs. To setup Exim or Posfix, checkout the documentation .","title":"MTA"},{"location":"web/","text":"Mailman 3 Web UI \u00b6 This image consists of Mailman3's Web UI(Postorius) and Archiver (Hyperkitty). This image is built from latest sources on gitlab . In future, latest and stable releases will be seperate. I am looking forward to the release of Mailman Suite 3.1 before that. Configuration \u00b6 These are the settings that you MUST change before deploying: SERVE_FROM_DOMAIN : The domain name from which Django will be served. To be added to ALLOWED_HOSTS in django settings. Default value is not set. This also replaces Django's default example.com SITE and becomes the default SITE (with SITE_ID=1). HYPERKITTY_API_KEY : Hyperkitty's API Key, should be set to the same value as set for the mailman-core. MAILMAN_ADMIN_USER : The username for the admin user to be created by default. MAILMAN_ADMIN_EMAIL : The email for the admin user to be created by default. SECRET_KEY : Django's secret key, mainly used for signing cookies and others. These are the settings that are set to sane default and you do not need to change them unless you know what you want. DATABASE_URL : URL of the type driver://user:password@hostname:port/databasename for the django to use. If not set, the default is set to sqlite:///opt/mailman-web-data/mailmanweb.db . The standard docker-compose.yaml comes with it set to a postgres database. It is not must to change this if you are happy with postgresql. MAILMAN_REST_URL : The URL to the Mailman core's REST API server. Defaut value is http://mailman-core:8001 . MAILMAN_REST_USER : Mailman's REST API username. Default value is restadmin MAILMAN_REST_PASSWORD : Mailman's REST API user's password. Default value is restpass MAILMAN_HOSTNAME : IP of the Container from which Mailman will send emails to hyperkitty (django). Set to mailman-core by default. SMTP_HOST : IP Address/hostname from which you will be sending emails. Default value is the container's gateway retrieved from: /sbin/ip route | awk '/default/ { print $3 }' SMTP_PORT : Port used for SMTP. Default is 25 . SMTP_HOST_USER : Used for SMTP authentication. Default is an empty string. SMTP_HOST_PASSWORD : Default is an empty string. SMTP_USE_TLS : Specifies wheather the SMTP connection is encrypted via TLS. Default is False . DJANGO_LOG_URL : Path to the django's log file. Defaults to /opt/mailman-web-data/logs/mailmanweb.log . DJANGO_ALLOWED_HOSTS : Entry to add to ALLOWED_HOSTS in Django configuration. This is a separate configuration from SERVE_FROM_DOMAIN as latter is used for other purposes too. POSTORIUS_TEMPLATE_BASE_URL : The base url at which the mailman-web container can be reached from mailman-core container. This is set to http://mailman-web:8000 by default so that Core can fetch templates from Web. MAILMAN_WEB_SOCIAL_AUTH : This is a list of Social login providers. It contains a default set of providers. Override it if you want to remove or disable social login entierly. If INSTALLED_APPS is overridden MAILMAN_WEB_SOCIAL_AUTH is not used and you must specify any social login provider in INSTALLED_APPS instead. See settings.py for implementation details. Running \u00b6 It is highly recommended that you run this using the docker-compose.yaml provided in the github repo of this project. You will need to proxy the requests the container that you create with this image using an actual web server like Nginx. The github repo provides the setup instructions for Nginx. Since the setup has USE_SSL set to True in django's settings.py , you may also want to get a SSL certificate if you don't already have one. Lets Encrypt provides free SSL certiticates for everyone and there are some instructions about that also. After the first run, you can create a superuser for django using the following command: $ docker exec -it mailman-web python manage.py createsuperuser","title":"Mailman Web"},{"location":"web/#mailman-3-web-ui","text":"This image consists of Mailman3's Web UI(Postorius) and Archiver (Hyperkitty). This image is built from latest sources on gitlab . In future, latest and stable releases will be seperate. I am looking forward to the release of Mailman Suite 3.1 before that.","title":"Mailman 3 Web UI"},{"location":"web/#configuration","text":"These are the settings that you MUST change before deploying: SERVE_FROM_DOMAIN : The domain name from which Django will be served. To be added to ALLOWED_HOSTS in django settings. Default value is not set. This also replaces Django's default example.com SITE and becomes the default SITE (with SITE_ID=1). HYPERKITTY_API_KEY : Hyperkitty's API Key, should be set to the same value as set for the mailman-core. MAILMAN_ADMIN_USER : The username for the admin user to be created by default. MAILMAN_ADMIN_EMAIL : The email for the admin user to be created by default. SECRET_KEY : Django's secret key, mainly used for signing cookies and others. These are the settings that are set to sane default and you do not need to change them unless you know what you want. DATABASE_URL : URL of the type driver://user:password@hostname:port/databasename for the django to use. If not set, the default is set to sqlite:///opt/mailman-web-data/mailmanweb.db . The standard docker-compose.yaml comes with it set to a postgres database. It is not must to change this if you are happy with postgresql. MAILMAN_REST_URL : The URL to the Mailman core's REST API server. Defaut value is http://mailman-core:8001 . MAILMAN_REST_USER : Mailman's REST API username. Default value is restadmin MAILMAN_REST_PASSWORD : Mailman's REST API user's password. Default value is restpass MAILMAN_HOSTNAME : IP of the Container from which Mailman will send emails to hyperkitty (django). Set to mailman-core by default. SMTP_HOST : IP Address/hostname from which you will be sending emails. Default value is the container's gateway retrieved from: /sbin/ip route | awk '/default/ { print $3 }' SMTP_PORT : Port used for SMTP. Default is 25 . SMTP_HOST_USER : Used for SMTP authentication. Default is an empty string. SMTP_HOST_PASSWORD : Default is an empty string. SMTP_USE_TLS : Specifies wheather the SMTP connection is encrypted via TLS. Default is False . DJANGO_LOG_URL : Path to the django's log file. Defaults to /opt/mailman-web-data/logs/mailmanweb.log . DJANGO_ALLOWED_HOSTS : Entry to add to ALLOWED_HOSTS in Django configuration. This is a separate configuration from SERVE_FROM_DOMAIN as latter is used for other purposes too. POSTORIUS_TEMPLATE_BASE_URL : The base url at which the mailman-web container can be reached from mailman-core container. This is set to http://mailman-web:8000 by default so that Core can fetch templates from Web. MAILMAN_WEB_SOCIAL_AUTH : This is a list of Social login providers. It contains a default set of providers. Override it if you want to remove or disable social login entierly. If INSTALLED_APPS is overridden MAILMAN_WEB_SOCIAL_AUTH is not used and you must specify any social login provider in INSTALLED_APPS instead. See settings.py for implementation details.","title":"Configuration"},{"location":"web/#running","text":"It is highly recommended that you run this using the docker-compose.yaml provided in the github repo of this project. You will need to proxy the requests the container that you create with this image using an actual web server like Nginx. The github repo provides the setup instructions for Nginx. Since the setup has USE_SSL set to True in django's settings.py , you may also want to get a SSL certificate if you don't already have one. Lets Encrypt provides free SSL certiticates for everyone and there are some instructions about that also. After the first run, you can create a superuser for django using the following command: $ docker exec -it mailman-web python manage.py createsuperuser","title":"Running"}]}